AWSTemplateFormatVersion: 2010-09-09

Description: AWS Synthetics common resources

Parameters:
  NotificationEndpoint:
    Description: Email address
    Type: String

Conditions:
  NotificationEnabled: !Not [!Equals [!Ref NotificationEndpoint, '']]

Resources:
  AlertTopic:
    Type: AWS::SNS::Topic
    Condition: NotificationEnabled
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEndpoint
          Protocol: email
      TopicName: AlertTopic-Synthetics

  CodeBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-code-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 180
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  ResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${AWS::StackName}-syn-results-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 180
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  CloudWatchSyntheticsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${AWS::Region}-ExecutionRole
      Description: CloudWatch Synthetics lambda execution role for running canaries
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-ExecutionRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource:
                  - Fn::Sub: arn:aws:s3:::${ResultsBucket}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cwsyn-*
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'
              - Effect: Allow
                Resource: '*'
                Action: cloudwatch:PutMetricData
                Condition:
                  StringEquals:
                    cloudwatch:namespace: CloudWatchSynthetics
              - Effect: Allow
                Resource: '*'
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - xray:PutTraceSegments

Outputs:
  AlertTopicArn:
    Condition: NotificationEnabled
    Description: Alert SNS Topic ARN
    Value: !Ref AlertTopic
  ArtifactS3Location:
    Value: !Sub s3://${ResultsBucket}
    Export:
      Name: !Sub ${AWS::StackName}:artifact-s3-location
  CloudWatchSyntheticsRoleArn:
    Value: !GetAtt CloudWatchSyntheticsRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}:synthetics-role-arn
  CodeBucketName:
    Value: !Ref CodeBucket
    Export:
      Name: !Sub ${AWS::StackName}:code-bucket
